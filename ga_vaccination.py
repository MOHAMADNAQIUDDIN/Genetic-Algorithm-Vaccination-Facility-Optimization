# -*- coding: utf-8 -*-
"""Ga_Vaccination.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17f6wT7jTAJaHQV1nkUyGFTyeUPNcGrA1
"""

places = {1: {'District': 'Hulu Langat', 'Name': 'Dewan Orang Ramai Ampang ', 'Lat':3.13, 'Long': 101.79, 'Capacity': 15000, 'Fitness': 0, 'Chromosome': 0},
          2: {'District': 'Hulu Langat', 'Name': 'Hospital Ampang ', 'Lat':3.13, 'Long': 101.77, 'Capacity': 15000, 'Fitness': 0, 'Chromosome': 0},
          3: {'District': 'Hulu Langat', 'Name': 'Hospital Kajang ', 'Lat':2.99, 'Long': 101.79, 'Capacity': 15000, 'Fitness': 0, 'Chromosome': 0},
          4: {'District': 'Hulu Langat', 'Name': 'Dewan Dato Nazir Hulu Langat ', 'Lat':3.11, 'Long': 101.82, 'Capacity': 1400, 'Fitness': 0, 'Chromosome': 0},
          5: {'District': 'Hulu Langat', 'Name': 'Sekolah Menengah Kebangsaan Dusun Nanding ', 'Lat':3.08, 'Long': 101.79, 'Capacity': 1320, 'Fitness': 0, 'Chromosome': 0},

          6: {'District': 'Gombak', 'Name': 'Hospital Selayang ', 'Lat':3.24, 'Long': 101.65, 'Capacity': 9000, 'Fitness': 0, 'Chromosome': 0},
          7: {'District': 'Gombak', 'Name': 'Hospital Orang Asli Gombak ', 'Lat':3.29, 'Long': 101.73, 'Capacity': 8000, 'Fitness': 0, 'Chromosome': 0},
          8: {'District': 'Gombak', 'Name': 'Hospital Sungai Buloh ', 'Lat':3.21, 'Long': 101.58, 'Capacity': 9000, 'Fitness': 0, 'Chromosome': 0},
          9: {'District': 'Gombak', 'Name': 'Dewan Alwy Jabatan Perhutanan Semenanjung Malaysia ', 'Lat':3.24, 'Long': 101.63, 'Capacity': 7000, 'Fitness': 0, 'Chromosome': 0},
          10: {'District': 'Gombak', 'Name': 'SMK Gombak Setia ', 'Lat':3.22, 'Long': 101.72, 'Capacity': 1350, 'Fitness': 0, 'Chromosome': 0},
          11: {'District': 'Gombak', 'Name': 'De Orchid Gombak Setia ', 'Lat':3.22, 'Long': 101.71, 'Capacity': 1000, 'Fitness': 0, 'Chromosome': 0},

          12: {'District':'Klang', 'Name': 'Dewan Kelab Kilat Pangsapuri TNB Kapar ', 'Lat': 3.67, 'Long': 101.40, 'Capacity': 1000, 'Fitness': 0, 'Chromosome': 0},
          13: {'District':'Klang', 'Name': 'Dewan Sukan Pandamaran ', 'Lat': 3.01, 'Long': 101.41, 'Capacity': 10000, 'Fitness': 0, 'Chromosome': 0},
          14: {'District':'Klang', 'Name': 'Hospital Tengku Ampuan Rahimah ', 'Lat': 3.03, 'Long': 101.44, 'Capacity' :20000, 'Fitness': 0, 'Chromosome': 0},
          15: {'District':'Klang', 'Name': 'Masjid Jamek Ar-Rahimiah ', 'Lat': 3.02, 'Long': 101.44, 'Capacity': 2800, 'Fitness': 0, 'Chromosome': 0},
          16: {'District':'Klang', 'Name': 'Sekolah Kebangsaan Kapar ', 'Lat': 3.13, 'Long': 101.38, 'Capacity' :2200, 'Fitness': 0, 'Chromosome': 0},
          17: {'District':'Klang', 'Name': 'Stadium Hoki MPK ', 'Lat': 3.01, 'Long': 101.42, 'Capacity': 2700, 'Fitness': 0, 'Chromosome': 0},

          18: {'District':'Hulu Selangor', 'Name': 'Dewan Semai Bakti Felda Soeharto  ', 'Lat': 3.67, 'Long': 101.39, 'Capacity': 1000, 'Fitness': 0, 'Chromosome': 0},
          19: {'District': 'Hulu Selangor', 'Name': 'Hospital Kuala Kubu Bharu  ', 'Lat': 3.56, 'Long': 101.65, 'Capacity': 2000, 'Fitness': 0, 'Chromosome': 0},
          20: {'District':'Hulu Selangor', 'Name': 'Sekolah Kebangsaan KKB  ', 'Lat': 3.56, 'Long': 101.66, 'Capacity': 500, 'Fitness': 0, 'Chromosome': 0},
          21: {'District':'Hulu Selangor', 'Name': 'MRSM Kuala Kubu Bharu  ', 'Lat': 3.54, 'Long': 101.68, 'Capacity': 400, 'Fitness': 0, 'Chromosome': 0},
          22: {'District':'Hulu Selangor', 'Name': 'Sekolah Kebangsaan Kampung Soeharto  ', 'Lat': 3.68, 'Long': 101.39, 'Capacity': 400, 'Fitness': 0, 'Chromosome': 0},

          23: {'District':'Kuala Langat', 'Name': 'Hospital Banting ', 'Lat': 2.80, 'Long': 101.49, 'Capacity': 5000, 'Fitness': 0, 'Chromosome': 0},
          24: {'District':'Kuala Langat', 'Name': 'Kompleks Sukan Majlis Perbadanan Kuala Langat ', 'Lat': 2.80, 'Long': 101.50, 'Capacity': 3000, 'Fitness': 0, 'Chromosome': 0},
          25: {'District':'Kuala Langat', 'Name': 'Stadium Jugra ', 'Lat': 2.82, 'Long': 101.52, 'Capacity': 300, 'Fitness': 0, 'Chromosome': 0},
          26: {'District':'Kuala Langat', 'Name': 'Kolej Mara Banting ', 'Lat': 2.82, 'Long': 101.62, 'Capacity': 500, 'Fitness': 0, 'Chromosome': 0},

          27: {'District':'Kuala Selangor', 'Name': 'Hospital Tanjung Karang ', 'Lat': 3.43, 'Long': 101.18, 'Capacity': 2000, 'Fitness': 0, 'Chromosome': 0},
          28: {'District':'Kuala Selangor', 'Name': 'Stadium Tertutup Kuala Selangor ', 'Lat': 3.32, 'Long': 101.45, 'Capacity': 2000, 'Fitness': 0, 'Chromosome': 0},
          29: {'District':'Kuala Selangor', 'Name': 'UITM Puncak Alam ', 'Lat': 3.20, 'Long': 101.45, 'Capacity': 1000, 'Fitness': 0, 'Chromosome': 0},
          30: {'District':'Kuala Selangor', 'Name': 'Community Hall in Kampung Haji Razali ', 'Lat': 3.34, 'Long': 101.18, 'Capacity': 1000, 'Fitness': 0, 'Chromosome': 0},

          31:{'District':'Sabak Bernam','Name':'Dewan Seri Bernam Sg Besar ','Lat':3.68,'Long':100.99,'Capacity':1500, 'Fitness': 0, 'Chromosome': 0},
          32:{'District':'Sabak Bernam','Name':'Hospital Tengku Ampuan Jemaah ','Lat':3.76,'Long':100.99,'Capacity':1000, 'Fitness': 0, 'Chromosome': 0},
          33:{'District':'Sabak Bernam','Name':'SJK(T) Ladang Sabak Bernam ','Lat':3.75,'Long':100.98,'Capacity':770, 'Fitness': 0, 'Chromosome': 0},

          34:{'District':'Sepang','Name':'Poliklinik Medi Ihsan ','Lat':2.87,'Long':101.70,'Capacity':1300, 'Fitness': 0, 'Chromosome': 0},
          35:{'District':'Sepang','Name':'Orion Clinic ','Lat':2.92,'Long':101.64,'Capacity':1300, 'Fitness': 0, 'Chromosome': 0},
          36:{'District':'Sepang','Name':'Klinik Masya ','Lat':2.87,'Long':101.75,'Capacity':1300, 'Fitness': 0, 'Chromosome': 0},
          37:{'District':'Sepang','Name':'Klinik Hazra Medic ','Lat':2.83,'Long':101.74,'Capacity':1300, 'Fitness': 0, 'Chromosome': 0},
          38:{'District':'Sepang','Name':'Klinik Dr Nina ','Lat':2.81,'Long':101.74,'Capacity':1300, 'Fitness': 0, 'Chromosome': 0},
          39:{'District':'Sepang','Name':'Hospital Serdang ','Lat':2.98,'Long':101.72,'Capacity':2500, 'Fitness': 0, 'Chromosome': 0},
          40:{'District':'Sepang','Name':'Dewan Serbaguna Bandar Baru Salak Tinggi ','Lat':2.81,'Long':101.84,'Capacity':5190, 'Fitness': 0, 'Chromosome': 0},
          41:{'District':'Sepang','Name':'SJK(T) West Country Barat ','Lat':2.81,'Long':101.72,'Capacity':1000, 'Fitness': 0, 'Chromosome': 0},

          42:{'District':'Petaling','Name':'Hospital Shah Alam ','Lat':3.07,'Long':101.49,'Capacity':75000, 'Fitness': 0, 'Chromosome': 0},
          43:{'District':'Petaling','Name':'Klinik Rakan Medik ','Lat':3.11,'Long':101.60,'Capacity':5000, 'Fitness': 0, 'Chromosome': 0},
          44:{'District':'Petaling','Name':'Sunway Pyramid Convention Centre ','Lat':3.07,'Long':101.61,'Capacity':50000, 'Fitness': 0, 'Chromosome': 0},
          45:{'District':'Petaling','Name':'Columbia Asia Hospital ','Lat':3.09,'Long':101.45,'Capacity':2000, 'Fitness': 0, 'Chromosome': 0},
          46:{'District':'Petaling','Name':'KPJ Selangor Specialist Hospital ','Lat':3.07,'Long':101.54,'Capacity':2000, 'Fitness': 0, 'Chromosome': 0},
          47:{'District':'Petaling','Name':'Dewan Serbaguna Dato Hormat PJS10/34 ','Lat':3.08,'Long':101.60,'Capacity':1770, 'Fitness': 0, 'Chromosome': 0}
}

# Commented out IPython magic to ensure Python compatibility.
from math import cos
from math import sqrt
import numpy as np, random, operator, pandas as pd, matplotlib.pyplot as plt
from random import uniform
from numpy.random import randint
from numpy.random import rand

#------------------------------------------- class ---------------------------------------------

class City:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    
    def distance(self, city):
        xDis = abs(self.x - city.x)
        yDis = abs(self.y - city.y)
        distance = np.sqrt((xDis ** 2) + (yDis ** 2))
        return distance
    
    def __repr__(self):
        return "(" + str(self.x) + "," + str(self.y) + ")"

#-------------------------------------- function --------------------------------------------------

#get the highest and lowest fitness---------------------------------------------
def Hfitness(x, n_pop):
  fitness = x[0]
  for i in range(0,n_pop):
    if x[i] > fitness:
      fitness = x[i]
  return fitness

def Lfitness(high,x,n_pop):
  fitness = high
  for i in range(0,n_pop):
    if x[i] < fitness:
      fitness = x[i]
  return fitness

#create random chromosome for each population-----------------------------------
def popu_chromo(population):
  kromosom = []
  coor_kromosom = []
  for i in range(0,population):
    coor_kromosom.append(City(x=round((random.uniform(2.80,3.80)),2), y=round((random.uniform(100.95,101.99)),2)))
    latx = str(round(coor_kromosom[i].x * 100))
    longy = str(round(coor_kromosom[i].y * 100)) 
    kromosom.append(latx + longy + '00000000' + '03')
  return kromosom

#create a chromosome for each PPVs----------------------------------------------
def ppv_chromo(places,z):
  coor_place = []
#  z=randint(0,47)
  latxx = str(round(places[z]['Lat'] * 100))
  longyy = str(round(places[z]['Long'] * 100))
  coor_place.append('00000000' + latxx + longyy + '00')
  return coor_place

#Combine population and PPVs chromosome into full chromosome--------------------
def new_chromo(places, kromosom):
  new_chromo = []
  for i in places:
    p = i
    newp = str(p[8:16]) 
    for i in kromosom:
      kro = i
      new = str(kro[0:8])
      new_chromo.append(new + newp + '03')
  return new_chromo

#find the distance of each person form PPV using Euclidean Distance formula-----
def cal_distance(places):
  distance = []
  for i in places:
    kro = i
    latk = float(kro[8:11]) / 100
    longk = float(kro[11:16]) / 100  
    latp = float(kro[0:3]) / 100
    longp = float(kro[3:8]) / 100
    x = latp - latk
    y = (longp - longk) * cos((latp + latk)*0.00872664626)
    dist=111.319 * sqrt(x*x + y*y)
    roff_dist = round(dist)
    distance.append(roff_dist)
  return distance

#Calculate the accuracy between the nearest distance and the distance for each person
def accuracy(distance,lowest):
  accuracy =[]
  if distance == lowest:
    accuracy = 100
  else:
    accuracy = 100 - (distance - lowest)
  return accuracy

#Select 2 parent to create the children-----------------------------------------
def selection(kromosom, calc_distance, k=3):
	selection = randint(len(kromosom))
	for s in randint(0, len(kromosom), k-1):
		if calc_distance[s] < calc_distance[selection]:
			selection = s
	return kromosom[selection]

#crossover function-------------------------------------------------------------
def crossover(p1, p2, r_cross):
  pt1 = []
  pt2 = []
  c1, c2 = p1, p2
  if rand() < r_cross:
		# select crossover point that is not on the end of the string
    pt1 = p1[4:12]
    pt2 = p2[4:12]
		# perform crossover
    c1 = p1[:4] + pt2 + p1[12:]
    c2 = p2[:4] + pt1 + p2[12:]
  return [c1, c2]

#mutation function--------------------------------------------------------------
def mutation(bitstring,r_mut):
  z=randint(0,9)
  y=randint(0,16)
  if 0.5 < r_mut:  #check for a mutation
    a=bitstring[y]
    bitstring = bitstring.replace(a,str(z))
  return bitstring

#full genetic algorithm function that included all function above---------------
def genetic_algorithm(objective, n_iter, n_pop, r_cross, r_mut, place, popu_chromo,ppv_chromo, places, cal_distance, new_chromo, objective2, accuracy):
  pop = popu_chromo(n_pop)
  print('Chromosome for each person = %s' % (pop))
  z=1
  place = ppv_chromo(places,z)
  print('PPVs Chromosome for %s: %s' % (places[z]["Name"],place))
  poplace = new_chromo(place,pop)
  print('Combine person and ppvs chromosome = %s' % (poplace))
  assign = cal_distance(poplace)
  print('Distance from person to the choosen PPVs = %s' % (assign))
  highest = objective(assign,n_pop)
  print('The farthest distance = %d' % (highest))
  lowest = objective2(highest,assign,n_pop)
  print('The nearest distance = %d' % (lowest))
  best, best_eval = 0, highest
  best_accuracy = []
  generation = []
  print("----------------------------------------------------------------------------")
  print("| Generation |          Chromosome            |  Distance  |    Accuracy   |")
  print("----------------------------------------------------------------------------")
  for gen in range(n_iter):
    for i in range(n_pop):
      if assign[i] < best_eval:
        best, best_eval = poplace[i], assign[i]
        accuracies = accuracy(assign[i],lowest)
        print(">Generation : %d, new best f(%s) = %.3f , Accuracy = %d" % (gen,  poplace[i], assign[i], accuracies))
        best_accuracy.append(assign[i])
        generation.append(gen)
    z+=1
    if z < 48:
      place = ppv_chromo(places,z)
      poplace = new_chromo(place,pop)
      assign = cal_distance(poplace)
      highest = objective(assign,n_pop)
      lowest = objective2(highest,assign,n_pop)
#      best_eval = highest
  selected = [selection(poplace, assign) for _ in range(n_pop)]
  children = list()
  for i in range(0, n_pop, 2):
    p1, p2 = selected[i], selected[i+1]
    #print('Parent 1 = %s, Parent 2 = %s' % (p1, p2))
    for c in crossover(p1, p2, r_cross):
      #print('After crossover = %s' % (c))
      c = mutation(c, r_mut)
      #print('After mutation = %s' % (c))
      children.append(c)
      pop = children
  return [best, best_eval, assign, lowest, poplace, best_accuracy, generation]

#-------------------------------------------------------main coding-----------------------------------------------------------

# define the total iterations
n_iter = 47
# define the population size
n_pop = 100
# crossover rate
r_cross = 0.9
# mutation rate
r_mut = 0.7

# perform the genetic algorithm search
best, score, assign, lowest, popu, best_accuracy, generation = genetic_algorithm(Hfitness, n_iter, n_pop, r_cross, r_mut, places, popu_chromo, ppv_chromo, places, cal_distance, new_chromo, Lfitness, accuracy)
print('Done!')
print('f(%s) = %f' % (best, score))
accuracy_graph = []
onebyone = []
y=1
for i in popu:
  onebyone.append(y)
  y+=1

for i in range(n_pop):
  accuracy_graph.append(accuracy(assign[i], lowest))

#-------------------------------------------------------------graph coding--------------------------------------------------------------

import matplotlib.pyplot as plt
# %matplotlib inline

#set the graph size 15 inch x 5 inch
plt.figure(figsize=(15,5))
plt.subplot(1,2,1)
plt.plot(onebyone,accuracy_graph)
plt.xlabel('Chromosome')
plt.ylabel('Accuracy')
plt.title("Accuracy of the first generation")

plt.subplot(1,2,2)
plt.plot(generation,best_accuracy)
plt.xlabel('Generation')
plt.ylabel('Distance')
plt.title("Eucledian distance in generation")

plt.show()